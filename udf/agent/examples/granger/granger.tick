// This tickscript pulls data from two influx streams, merges the streams, sends the merged stream to a
// granger UDF for analysis, and posts the results of the granger analysis to influxdb

// Define our desired order
var order = 4

var stream1 = stream
    |from()
        .measurement('cause')
var stream2 = stream
    |from()
        .measurement('effect')

var data = stream1
    |union(stream2)
        .rename('merged_stream')
    |window()
        .period(20s)
        .every(2s)

data
    @granger()
        .field1('causevalue')
        .field2('effectvalue')
        .order(order)
    |influxDBOut()
        .database('granger')
        .create()
        .measurement('granger')


// Select the temperatures measurements
//var data = stream
//    |from()
//        .measurement('temperatures')
//    |window()
//        .period(5m)
//        .every(5m)

//data
    //Run our tTest UDF on the hotend temperature
//    @tTest()
        // specify the hotend field
//        .field('hotend')
        // Keep a 1h rolling window
//        .size(3600)
        // pass in the alpha value
//        .alpha(alpha)
//    |alert()
//        .id('hotend')
//        .crit(lambda: "pvalue" < alpha)
//        .log('/tmp/kapacitor_udf/hotend_failure.log')